<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="rover">

  <!-- Constants -->
  <xacro:property name="base_width" value="0.635"/>
  <xacro:property name="base_len" value="0.478"/>
  <xacro:property name="base_height" value="0.183"/>
  <xacro:property name="wheel_radius" value="0.13"/>
  <xacro:property name="wheel_width" value="0.08"/>
  <xacro:property name="wheel_mass" value="3"/>
  <xacro:property name="chassis_mass" value="15"/>
  <xacro:property name="wheel_torque" value="2.68"/>

  <!-- Suspension link lengths (measured from blender) -->
  <xacro:property name="rocker_front_length" value="0.44752"/>
  <xacro:property name="rocker_front_angle" value="${39*pi/180}"/>
  <xacro:property name="rocker_rear_length" value="0.281575"/>
  <xacro:property name="rocker_rear_angle" value="${170*pi/180}"/>
  <xacro:property name="double_lambda_base_length" value="0.14239"/>
  <xacro:property name="double_lambda_base_angle" value="${pi/2}"/>
  <xacro:property name="double_lambda_base_offset" value="-0.03810"/>
  <xacro:property name="double_lambda_crank_length" value="0.09187"/>
  <xacro:property name="double_lambda_crank_angle" value="${-39.603*pi/180}"/>
  <xacro:property name="double_lambda_lower_length" value="0.16767"/>
  <xacro:property name="double_lambda_lower_angle" value="${-20*pi/180}"/>
  <xacro:property name="double_lambda_long_length" value="0.38313"/>
  <xacro:property name="double_lambda_long_angle" value="${58.871*pi/180}"/>
  <xacro:property name="double_lambda_long_shift" value="0.16767"/>

  <!-- Inertial Macros-->

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+h*h)/12}" ixy="0" ixz="0"
               iyy="${m*(3*r*r+h*h)/12}" iyz="0"
               izz="${m*r*r/2}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="box_inertia" params="m d w h">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (w*w + h*h)}" ixy="0" ixz="0"
               iyy="${m / 12.0 * (d*d + h*h)}" iyz="0"
               izz="${m / 12.0 * (d*d + w*w)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0" ixz="0"
               iyy="${2.0*m*(r*r)/5.0}" iyz="0"
               izz="${2.0*m*(r*r)/5.0}"/>
    </inertial>
  </xacro:macro>

  <!-- Joints/Links Macros -->

  <xacro:macro name="arm_link" params="name m x y z dz:=0">
    <link name="arm_${name}_link">
      <xacro:box_inertia m="${m}" d="${y}" w="${x}" h="${z}"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/arm_${name}.fbx"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="${x / 2} 0 ${dz}"/>
        <geometry>
          <box size="${x * 0.85} ${y} ${z}"/>
        </geometry>
      </collision>
    </link>
  </xacro:macro>

  <xacro:macro name="arm_revolute_joint" params="parent child x y z lower upper">
    <joint name="${parent}_link_to_${child}_link" type="revolute">
      <origin xyz="${x} ${y} ${z}"/>
      <parent link="${parent}_link"/>
      <child link="${child}_link"/>
      <axis xyz="0 1 0"/>
      <limit lower="${lower}" upper="${upper}" effort="0" velocity="0"/>
    </joint>
  </xacro:macro>

  <xacro:macro name="wheel" params="pos side reflect">
    <link name="${pos}_${side}_wheel_link">
      <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/rover_${side}_wheel.fbx"/>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
        </geometry>
      </collision>
    </link>
  </xacro:macro>

  <!-- creates a collider that extends like a ray of some length at some angle (by default) -->
  <xacro:macro name="suspension_collider" params="length width:=0.025 height:=0.025 angle dx:=0 dy:=0 dz:=0">
    <collision>
      <origin xyz="${length * cos(angle)/2 + dx} ${length * sin(angle)/2 + dy} ${dz}" rpy="0 0 ${angle}"/>
      <geometry>
        <box size="${length * 0.75} ${width} ${height}"/>
      </geometry>
    </collision>
  </xacro:macro>

  <xacro:macro name="wheels" params="side reflect">
    <xacro:wheel pos="front" side="${side}" reflect="${reflect}"/>
    <xacro:wheel pos="center" side="${side}" reflect="${reflect}"/>
    <xacro:wheel pos="back" side="${side}" reflect="${reflect}"/>

    <link name="${side}_rocker_link">
      <xacro:box_inertia m="3" d="0.5" w="0.5" h="0.5"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/rover_${side}_rocker.fbx"/>
        </geometry>
      </visual>
      <xacro:suspension_collider length="${rocker_front_length}" angle="${rocker_front_angle}"/>
      <xacro:suspension_collider length="${rocker_rear_length}" angle="${rocker_rear_angle}"/>
      <xacro:suspension_collider length="${double_lambda_base_length}" angle="${double_lambda_base_angle}"
                                 dx="${rocker_rear_length * cos(rocker_rear_angle)}"
                                 dy="${rocker_rear_length * sin(rocker_rear_angle) + double_lambda_base_offset}"/>
    </link>

    <link name="${side}_lambda_crank_rear_link">
      <xacro:box_inertia m="3" d="0.1" w="0.1" h="0.1"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/rover_rear_lambda_crank.fbx"/>
        </geometry>
      </visual>
      <xacro:suspension_collider length="${double_lambda_crank_length}"
                                 angle="${pi - double_lambda_crank_angle}"
                                 height="0.008"/>
    </link>

    <link name="${side}_lambda_crank_front_link">
      <xacro:box_inertia m="3" d="0.1" w="0.1" h="0.1"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/rover_front_lambda_crank.fbx"/>
        </geometry>
      </visual>
      <xacro:suspension_collider length="${double_lambda_crank_length}"
                                 angle="${double_lambda_crank_angle}"
                                 height="0.008"/>
    </link>

    <link name="${side}_lambda_lower_link">
      <xacro:box_inertia m="2" d="0.5" w="0.5" h="0.5"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/rover_${side}_lambda_lower.fbx"/>
        </geometry>
      </visual>
      <xacro:suspension_collider length="${double_lambda_lower_length}" angle="${double_lambda_lower_angle}"/>
      <xacro:suspension_collider length="${double_lambda_lower_length}" angle="${pi - double_lambda_lower_angle}"/>
    </link>

    <link name="${side}_lambda_front_link">
      <xacro:box_inertia m="2" d="0.5" w="0.5" h="0.5"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/rover_${side}_lambda_front.fbx"/>
        </geometry>
      </visual>
      <xacro:suspension_collider length="${double_lambda_long_length}" angle="${double_lambda_long_angle}"
                                 dx="${-double_lambda_long_shift * cos(double_lambda_long_angle)}"
                                 dy="${-double_lambda_long_shift * sin(double_lambda_long_angle)}"/>
    </link>

    <link name="${side}_lambda_rear_link">
      <xacro:box_inertia m="2" d="0.5" w="0.5" h="0.5"/>
      <visual>
        <geometry>
          <mesh filename="package://mrover/urdf/meshes/rover_${side}_lambda_rear.fbx"/>
        </geometry>
      </visual>
      <xacro:suspension_collider length="${double_lambda_long_length}" angle="${pi - double_lambda_long_angle}"
                                 dx="${double_lambda_long_shift * cos(double_lambda_long_angle)}"
                                 dy="${-double_lambda_long_shift * sin(double_lambda_long_angle)}"/>
    </link>

    <joint name="chassis_link_to_${side}_rocker_link" type="revolute">
      <parent link="chassis_link"/>
      <child link="${side}_rocker_link"/>
      <origin xyz="0.164665 ${reflect * (base_width/2 + 0.041)} 0" rpy="${-pi/2} 0 0"/>
      <axis xyz="0 0 1"/>
      <limit lower="-0.122173" upper="0.523599" effort="0" velocity="0"/>
    </joint>

    <joint name="${side}_rocker_link_to_front_${side}_wheel_link" type="continuous">
      <parent link="${side}_rocker_link"/>
      <child link="front_${side}_wheel_link"/>
      <origin xyz="${rocker_front_length * cos(rocker_front_angle)}
                   ${rocker_front_length * sin(rocker_front_angle)}
                   ${reflect * 0.076}"/>
      <axis xyz="0 0 1"/>
      <limit effort="${wheel_torque}" velocity="0"/>
    </joint>

    <joint name="${side}_lambda_front_link_to_center_${side}_wheel_link" type="continuous">
      <parent link="${side}_lambda_front_link"/>
      <child link="center_${side}_wheel_link"/>
      <origin xyz="${(double_lambda_long_length - double_lambda_long_shift) * cos(double_lambda_long_angle)}
                   ${(double_lambda_long_length - double_lambda_long_shift) * sin(double_lambda_long_angle)}
                   ${reflect * 0.076}"/>
      <axis xyz="0 0 1"/>
      <limit effort="${wheel_torque}" velocity="0"/>
    </joint>

    <joint name="${side}_lambda_rear_link_to_back_${side}_wheel_link" type="continuous">
      <parent link="${side}_lambda_rear_link"/>
      <child link="back_${side}_wheel_link"/>
      <origin xyz="${-(double_lambda_long_length - double_lambda_long_shift) * cos(double_lambda_long_angle)}
                   ${(double_lambda_long_length - double_lambda_long_shift) * sin(double_lambda_long_angle)}
                   ${reflect * 0.076}"/>
      <axis xyz="0 0 1"/>
      <limit effort="${wheel_torque}" velocity="0"/>
    </joint>

    <joint name="${side}_rocker_link_to_${side}_lambda_lower_link" type="continuous">
      <parent link="${side}_rocker_link"/>
      <child link="${side}_lambda_lower_link"/>
      <origin xyz="${rocker_rear_length * cos(rocker_rear_angle)}
                   ${rocker_rear_length * sin(rocker_rear_angle) + double_lambda_base_offset + double_lambda_base_length}
                   ${reflect * 0.045}"/>
      <axis xyz="0 0 1"/>
      <limit effort="0" velocity="0"/>
    </joint>

    <joint name="${side}_rocker_link_to_${side}_lambda_crank_front_link" type="revolute">
      <parent link="${side}_rocker_link"/>
      <child link="${side}_lambda_crank_front_link"/>
      <origin xyz="${rocker_rear_length * cos(rocker_rear_angle)}
                   ${rocker_rear_length * sin(rocker_rear_angle) + double_lambda_base_offset}
                   ${reflect * 0.04}"/>
      <axis xyz="0 0 1"/>
      <limit upper="${-double_lambda_crank_angle}" lower="${-pi/2-double_lambda_crank_angle}" effort="0" velocity="0"/>
    </joint>

    <joint name="${side}_rocker_link_to_${side}_lambda_crank_rear_link" type="revolute">
      <parent link="${side}_rocker_link"/>
      <child link="${side}_lambda_crank_rear_link"/>
      <origin xyz="${rocker_rear_length * cos(rocker_rear_angle)}
                   ${rocker_rear_length * sin(rocker_rear_angle) + double_lambda_base_offset}
                   ${reflect * 0.05}"/>
      <axis xyz="0 0 1"/>
      <limit upper="${pi/2+double_lambda_crank_angle}" lower="${double_lambda_crank_angle}" effort="0" velocity="0"/>
    </joint>

    <joint name="${side}_lambda_lower_link_to_${side}_lambda_front_link" type="continuous">
      <parent link="${side}_lambda_lower_link"/>
      <child link="${side}_lambda_front_link"/>
      <origin xyz="${double_lambda_lower_length * cos(double_lambda_lower_angle)}
                   ${double_lambda_lower_length * sin(double_lambda_lower_angle)}
                   0"/>
      <axis xyz="0 0 1"/>
      <limit effort="0" velocity="0"/>
    </joint>

    <joint name="${side}_lambda_lower_link_to_${side}_lambda_rear_link" type="continuous">
      <parent link="${side}_lambda_lower_link"/>
      <child link="${side}_lambda_rear_link"/>
      <origin xyz="${-double_lambda_lower_length * cos(double_lambda_lower_angle)}
                   ${double_lambda_lower_length * sin(double_lambda_lower_angle)}
                   0"/>
      <axis xyz="0 0 1"/>
      <limit effort="0" velocity="0"/>
    </joint>
  </xacro:macro>

  <!-- Joints/Links -->

  <link name="base_link"/>

  <link name="chassis_link">
    <xacro:box_inertia m="${chassis_mass}" d="${base_len}" w="${base_width}" h="${base_height}"/>
    <visual>
      <geometry>
        <mesh filename="package://mrover/urdf/meshes/rover_chassis.fbx"/>
      </geometry>
    </visual>
    <collision>
      <origin xyz="-0.085906 0 0.15"/>
      <geometry>
        <box size="0.277 ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <collision>
      <origin xyz="0.163609 0 0"/>
      <geometry>
        <box size="0.167 ${base_width} 0.0891 "/>
      </geometry>
    </collision>
  </link>

  <link name="arm_base_link"/>

  <joint name="base_link_to_arm_base_link" type="fixed">
    <origin xyz="0.199228 -0.200235 0.540196"/>
    <parent link="base_link"/>
    <child link="arm_base_link"/>
  </joint>

  <joint name="base_link_to_chassis_link" type="fixed">
    <origin xyz="0 0 0.439675"/>
    <parent link="base_link"/>
    <child link="chassis_link"/>
  </joint>

  <xacro:arm_link name="a" m="1" x="0.1" y="0.1" z="0.1"/>
  <xacro:arm_link name="b" m="1" x="0.58" y="0.04" z="0.04"/>
  <xacro:arm_link name="c" m="1" x="0.55" y="0.04" z="0.04" dz="0.1"/>
  <xacro:arm_link name="d" m="1" x="0.065" y="0.15" z="0.065"/>
  <xacro:arm_link name="e" m="1" x="0.15" y="0.155" z="0.032"/>

  <joint name="chassis_link_to_arm_a_link" type="prismatic">
    <origin xyz="0.164882 -0.200235 0.051497"/>
    <parent link="chassis_link"/>
    <child link="arm_a_link"/>
    <axis xyz="0 1 0"/>
    <limit lower="0" upper="0.4" effort="0" velocity="0"/>
  </joint>

  <xacro:arm_revolute_joint parent="arm_a" child="arm_b"
                            x="0.034346" y="0" z="0.049024"
                            lower="${-pi / 8}" upper="0"/>
  <xacro:arm_revolute_joint parent="arm_b" child="arm_c"
                            x="0.534365" y="0" z="0.009056"
                            lower="-0.959931" upper="2.87979"/>
  <xacro:arm_revolute_joint parent="arm_c" child="arm_d"
                            x="0.546033" y="0" z="0.088594"
                            lower="-2.35619" upper="2.35619"/>

  <joint name="arm_d_link_to_arm_e_link" type="revolute">
    <origin xyz="0.044886 0 0"/>
    <parent link="arm_d_link"/>
    <child link="arm_e_link"/>
    <axis xyz="1 0 0"/>
    <limit lower="-2.35619" upper="2.35619" effort="0" velocity="0"/>
  </joint>

  <xacro:wheels side="left" reflect="1"/>
  <xacro:wheels side="right" reflect="-1"/>

  <joint name="chassis_link_to_left_gps" type="fixed">
    <origin xyz="0 0.1 0"/>
    <parent link="chassis_link"/>
    <child link="left_gps"/>
  </joint>

  <link name="left_gps"/>

  <joint name="chassis_link_to_right_gps" type="fixed">
    <origin xyz="0 -0.1 0"/>
    <parent link="chassis_link"/>
    <child link="right_gps"/>
  </joint>

  <link name="right_gps"/>

  <joint name="chassis_link_to_center_gps" type="fixed">
    <origin xyz="0 0 1"/>
    <parent link="chassis_link"/>
    <child link="center_gps"/>
  </joint>

  <link name="center_gps"/>

  <joint name="chassis_link_to_imu" type="fixed">
    <origin xyz="0 0 0"/>
    <parent link="chassis_link"/>
    <child link="imu"/>
  </joint>

  <link name="imu"/>

  <!-- TODO(quintin): Import the ZED URDF here -->

  <joint name="chassis_link_to_zed_left_camera_frame" type="fixed">
    <origin xyz="0.3 0 0"/>
    <parent link="chassis_link"/>
    <child link="zed_left_camera_frame"/>
  </joint>

  <link name="zed_left_camera_frame">
    <collision>
      <geometry>
        <box size="0.01 0.1 0.01"/>
      </geometry>
    </collision>
  </link>

  <joint name="chassis_link_to_long_range_camera_link" type="fixed">
    <origin xyz="0.3 0 0"/>
    <parent link="chassis_link"/>
    <child link="long_range_camera_link"/>
  </joint>

  <link name="long_range_camera_link">
    <collision>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
    </collision>
  </link>

  <!-- TODO(quintin): I removed this for now, feel free to add it back when needed -->

  <!--  <joint name="chassis_link_to_mast_link" type="fixed">-->
  <!--    <origin xyz="0.0505 -0.086 0.558"/>-->
  <!--    <parent link="chassis_link"/>-->
  <!--    <child link="mast_link"/>-->
  <!--  </joint>-->

  <!--  <link name="mast_link"/>-->

  <!--  <joint name="mast_link_to_zed_mini_camera" type="continuous">-->
  <!--    <origin xyz="0.05 0 0.0"/>-->
  <!--    <parent link="mast_link"/>-->
  <!--    <child link="zed_mini_camera"/>-->
  <!--    <axis xyz="0 0 1"/>-->
  <!--    <limit effort="2.68" velocity="0"/>-->
  <!--  </joint>-->

  <!--  <link name="zed_mini_camera"/>-->

</robot>
